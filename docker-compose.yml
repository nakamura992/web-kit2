services:
  laravel:
    container_name: ${APP_NAME}-laravel
    build:
      context: .
      dockerfile: ./docker/laravel/${LARAVEL_DOCKERFILE:-Dockerfile}
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    volumes:
      - ./src/:/var/www/html
      # - ${STORAGE_MOUNT:-./src/storage}:/var/www/html/storage
      - vendor-volume:/var/www/html/vendor

  next:
    container_name: ${APP_NAME}-next
    build:
      context: .
      dockerfile: ./docker/next/${NEXT_DOCKERFILE:-Dockerfile}
    volumes:
      - node_modules-volume:/app/node_modules
      - ./next/:/app
    depends_on:
      - laravel
    command: [ "npm", "run", "dev" ]

  nginx:
    container_name: ${APP_NAME}-nginx
    build:
      context: .
      dockerfile: ./docker/nginx/${NGINX_DOCKERFILE:-Dockerfile}
    ports:
      - ${WEB_PORT:-80}:80
      - 443:443
    depends_on:
      - laravel
      - next
    volumes:
      - ./src/:/var/www/html
      - ./docker/nginx/${NGINX_CONF:-default.conf}:/etc/nginx/conf.d/default.conf
      - ./maintenance:/usr/share/nginx/html/maintenance
      - ./logs/nginx:/var/log/nginx
      - ./docker/certbot/conf:/etc/letsencrypt:ro
      - ./docker/certbot/www:/var/www/certbot:ro

  mysql:
    container_name: ${APP_NAME}-mysql
    build:
      context: .
      dockerfile: ./docker/mysql/${MYSQL_DOCKERFILE:-Dockerfile}
    environment:
      MYSQL_DATABASE: "${APP_NAME}"
      MYSQL_USER: "${APP_NAME}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    ports:
      - "3306:3306"
    volumes:
      - mysql-volume:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./logs/mysql:/var/log/mysql
    depends_on:
      - laravel

  mysql-backup:
    container_name: ${APP_NAME}-mysql-backup
    build:
      context: .
      dockerfile: ./docker/mysql-backup/${MYSQL_BACKUP_DOCKERFILE:-Dockerfile}
    volumes:
      - ./backup:/backup
      - ./docker/mysql-backup/backup.sh:/backup.sh
      - ./logs/mysql-backup:/var/log/mysql-backup
    environment:
      MYSQL_PWD: "${MYSQL_ROOT_PASSWORD}"
      BACKUP_INTERVAL: ${BACKUP_INTERVAL:-86400}
      BACKUP_RETENTION: ${BACKUP_RETENTION:-7}
    command: [ "/bin/sh", "-c", "chmod +x /backup.sh && /backup.sh" ]
    depends_on:
      - mysql

  pma:
    container_name: ${APP_NAME}-pma
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./docker/pma/${PMA_DOCKERFILE:-Dockerfile}
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ABSOLUTE_URI: ${PHPMYADMIN_ABSOLUTE_URI:-http://localhost/phpmyadmin}
    ports:
      - "8080:80"
    volumes:
      - ./docker/pma/phpmyadmin-misc.ini:/etc/phpmyadmin/config.user.ini
    depends_on:
      - mysql

  certbot:
    container_name: ${APP_NAME}-certbot
    image: certbot/certbot
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
      - ./docker/certbot/entrypoint.sh:/entrypoint.sh
    environment:
      - USE_SSL=${USE_SSL:-false}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - DOMAIN=${DOMAIN}
    entrypoint: [ "/bin/sh", "-c", "chmod +x /entrypoint.sh && /entrypoint.sh" ]
    depends_on:
      - nginx

volumes:
  mysql-volume:
    name: ${APP_NAME}-mysql-volume
  storage-volume:
    name: ${APP_NAME}-storage-volume
  vendor-volume:
    name: ${APP_NAME}-vendor-volume
  node_modules-volume:
    name: ${APP_NAME}-node_modules-volume
